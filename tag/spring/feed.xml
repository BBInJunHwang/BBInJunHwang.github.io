<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="http://localhost:4000/tag/spring/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2022-08-30T17:40:19+09:00</updated>
  <id>http://localhost:4000/tag/spring/feed.xml</id>

  
  
  

  
    <title type="html">junny blogs | </title>
  

  
    <subtitle>백엔드</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">spring 시작하기(8) Spring Profile</title>
      <link href="http://localhost:4000/spring-08_basic" rel="alternate" type="text/html" title="spring 시작하기(8) Spring Profile" />
      <published>2022-08-22T03:00:00+09:00</published>
      <updated>2022-08-22T03:00:00+09:00</updated>
      <id>http://localhost:4000/spring-08_basic</id>
      <content type="html" xml:base="http://localhost:4000/spring-08_basic">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Spring 강좌는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;!-- _posts/spring/포스트날짜, md 확장자 제외한 파일명--&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-01_basic&quot;&gt;spring 시작하기(1) bean 생성&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-02_basic&quot;&gt;spring 시작하기(2) @annotation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-03_basic&quot;&gt;spring 시작하기(3) @datasource&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-04_basic&quot;&gt;spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-05_basic&quot;&gt;spring 시작하기(5) DI 3가지 방법&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-06_basic&quot;&gt;spring 시작하기(6) AOP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-07_basic&quot;&gt;spring 시작하기(7) AOP PointCut&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-08_basic&quot;&gt;spring 시작하기(8) Spring Profile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- &lt;div&gt;
&lt;br&gt;
&lt;h2&gt;[스프링] Spring Profile&lt;/h2&gt;&lt;br&gt;

&lt;p align = &quot;justify&quot;&gt;
&lt;font size=3&gt;
서버 환경 별 빈생성 분기가 필요한 경우 Spring Profile을 사용한다.&lt;br&gt;
톰캣 환경변수 내 설정한 값을 통해서 DB 정보, 접속 정보 등 분기가 가능하다.&lt;br&gt;

톰캣에 환경 변수 적용
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring08/ch08_spring_profile01.PNG&apos; alt=&apos;absolute&apos;&gt;

AWS S3 접속정보&lt;br&gt;
프로퍼티스 파일내 선언한 ${key값} 으로 value를 가져올 수 있으며 &lt;br&gt;
만약 환경변수 값을 이용해서 프로퍼티스 key 값을 완성시키고 싶다면 &lt;br&gt;
${${환경변수값}.key값완성} 구조로 가져올 수 있다 &lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring08/ch08_spring_profile02.PNG&apos; alt=&apos;absolute&apos;&gt;

DB 접속정보도 마찬가지로 분기가 가능하며, context에 각 환경별 접속정보를 구축해놓고 JNDI ID로 분기 실시&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring08/ch08_spring_profile03.PNG&apos; alt=&apos;absolute&apos;&gt;

&lt;/font&gt;
&lt;/p&gt;
&lt;/div&gt; --&gt;

&lt;div&gt;
    &lt;header&gt;
      &lt;h2 class=&quot;title&quot;&gt;[스프링] Spring Profile&lt;/h2&gt;&lt;br /&gt;
    &lt;/header&gt;
    &lt;div&gt;
      &lt;h3 class=&quot;subTitle&quot;&gt;스프링 profile 이란?&lt;/h3&gt;
      &lt;p&gt; -&amp;gt;  서버 환경 별 빈생성 분기가 필요한 경우 Spring Profile을 사용한다.&lt;/p&gt;
      &lt;p&gt; -&amp;gt;  톰캣 환경변수 내 설정한 값을 통해서 DB 정보, 접속 정보 등 분기가 가능하다.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&quot;listWrapper&quot;&gt;
      &lt;!-- &lt;span style=&quot;font-size: 20px;&quot;&gt;스프링 빈 xml 등록 방법&lt;/span&gt; --&gt;
      &lt;ul class=&quot;imageList&quot;&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring08/ch08_spring_profile01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;톰캣에 환경 변수 적용&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring08/ch08_spring_profile02.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;AWS S3 접속정보&lt;br /&gt;
                    프로퍼티스 파일내 선언한 ${key값} 으로 value를 가져올 수 있으며 &lt;br /&gt;
                    만약 환경변수 값을 이용해서 프로퍼티스 key 값을 완성시키고 싶다면 &lt;br /&gt;
                    ${${환경변수값}.key값완성} 구조로 가져올 수 있다 &lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring08/ch08_spring_profile03.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;DB 접속정보도 마찬가지로 분기가 가능하며, context에 각 환경별 접속정보를 구축해놓고 JNDI ID로 분기 실시&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>BBInJunHwang</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">Spring 강좌는 여러 절로 구성되어 있습니다. spring 시작하기(1) bean 생성 spring 시작하기(2) @annotation spring 시작하기(3) @datasource spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI spring 시작하기(5) DI 3가지 방법 spring 시작하기(6) AOP spring 시작하기(7) AOP PointCut spring 시작하기(8) Spring Profile &amp;lt;!– &amp;lt;div&amp;gt; [스프링] Spring Profile</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">spring 시작하기(7) AOP PointCut</title>
      <link href="http://localhost:4000/spring-07_basic" rel="alternate" type="text/html" title="spring 시작하기(7) AOP PointCut" />
      <published>2022-06-12T03:00:00+09:00</published>
      <updated>2022-06-12T03:00:00+09:00</updated>
      <id>http://localhost:4000/spring-07_basic</id>
      <content type="html" xml:base="http://localhost:4000/spring-07_basic">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Spring 강좌는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;!-- _posts/spring/포스트날짜, md 확장자 제외한 파일명--&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-01_basic&quot;&gt;spring 시작하기(1) bean 생성&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-02_basic&quot;&gt;spring 시작하기(2) @annotation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-03_basic&quot;&gt;spring 시작하기(3) @datasource&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-04_basic&quot;&gt;spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-05_basic&quot;&gt;spring 시작하기(5) DI 3가지 방법&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-06_basic&quot;&gt;spring 시작하기(6) AOP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-07_basic&quot;&gt;spring 시작하기(7) AOP PointCut&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-08_basic&quot;&gt;spring 시작하기(8) Spring Profile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- &lt;div&gt;
&lt;br&gt;
&lt;h2&gt;[스프링] AOP PointCut&lt;/h2&gt;&lt;br&gt;

PointCuts&lt;br&gt;
-&gt; 원하는 method만 weving 될 수 있도록 (JoinPoint가 될 수 있도록) 지정한다. &lt;br&gt;
-&gt; Proxy는 모든 target으로 지정한 클래스 내 모든 메소드에 대해서 호출이 된다. (대상 선별없이) &lt;br&gt;
-&gt; 아래 예시처럼 service2 클래스에 대해서 타켓을 지정해놓은 상태이다. &lt;br&gt;
&lt;br&gt;
JoinPoint&lt;br&gt;
-&gt;&lt;br&gt;
&lt;br&gt;
Weaving&lt;br&gt;
-&gt; 뜨개질?&lt;br&gt;

&lt;br&gt;
classic 방법&lt;br&gt;
advice를 적용하기 위해서 매번 advisor를 생성해줘야한다.&lt;br&gt;
-&gt; 불편&lt;br&gt;
&lt;br&gt;


&lt;p align = &quot;justify&quot;&gt;
&lt;font size=3&gt;
pointcut 빈을 생성하며, method명을 지정한다. class=&quot; advisor 빈을 생성 후 advice 할 빈과&lt;br&gt;
pointcut 할 빈을 연결한다.&lt;br&gt;
proxy 빈에 logBeforeAdvice -&gt; classBeforeAdvisor로 변경한다.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring07/ch07_bean_xml_01.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;

SelectService는 before advice 제외된다.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring07/ch07_main_class_aop_nobefore_01.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;

poincut 빈에 등록된 method 인 SelectService2 는 before advice 적용된다.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring07/ch07_main_class_aop_yesbefore_01.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;

만약 다른 advice도 pointcut을 지정하고 싶으면 advisor을 하나 더 생성 후 적용한다.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring07/ch07_bean_xml_02.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;

SelectService는 before, after advice 제외된다.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring07/ch07_main_class_aop_nobeforeafter_01.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;



간소화 방법&lt;br&gt;
advice-pointcut 합치는 방법&lt;br&gt;

다음과 같이 NameMatchMethodPointcutAdvisor class를 이용해서 namematch + advisor 기능을 이용한다.&lt;br&gt;
before advice 경우 SelectService2에만 적용가능하게 설정했으며, &lt;br&gt;
after advice 경우 SelectService2, SelectService3 에 적용을 했다. (mappedName -&gt; mappedNames 변경 후 list-value 구조로 변경)&lt;br&gt;
&lt;br&gt;
실행하게 되면, SelectService는 before, after advice 제외&lt;br&gt;
SelectService2는 before, after advice 모두 적용&lt;br&gt;
SelectService3는 after advice만 적용&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring07/ch07_bean_xml_03.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;


RegexpMethodPointcutAdvisor class를 이용해서 정규식을 적용 할 수도 있다.&lt;br&gt;
mappedNames -&gt; patterns 변경 후 .(anycharacter) *(0개이상) -&gt; .*Service2* Method 이름 중에서 해당 패턴이 있는 대상에 대해서만&lt;br&gt;
around advice를 적용한다.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring07/ch07_bean_xml_04.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;

정규 패턴 적용 전에는 SelectService3 에서 around advice 호출 되었지만&lt;br&gt;
정규 패턴 적용 후에는 around advice 제외한다.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring07/ch07_main_class_aop_regexp_01.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;

&lt;/font&gt;
&lt;/p&gt;
&lt;/div&gt; --&gt;

&lt;div&gt;
    &lt;header&gt;
      &lt;h2 class=&quot;title&quot;&gt;[스프링] AOP PointCut&lt;/h2&gt;&lt;br /&gt;
    &lt;/header&gt;
    &lt;div&gt;
      &lt;h3 class=&quot;subTitle&quot;&gt;PointCuts&lt;/h3&gt;
      &lt;p&gt; -&amp;gt;  원하는 method만 weving 될 수 있도록 (JoinPoint가 될 수 있도록) 지정한다.&lt;/p&gt;
      &lt;p&gt; -&amp;gt;  Proxy는 모든 target으로 지정한 클래스 내 모든 메소드에 대해서 호출이 된다. (대상 선별없이)&lt;/p&gt;
      &lt;p&gt; -&amp;gt;  아래 예시처럼 service2 클래스에 대해서 타켓을 지정해놓은 상태이다.&lt;/p&gt;
      &lt;h3 class=&quot;subTitle&quot;&gt;JoinPoint&lt;/h3&gt;
      &lt;p&gt; -&amp;gt;  &lt;/p&gt;
      &lt;h3 class=&quot;subTitle&quot;&gt;Weaving&lt;/h3&gt;
      &lt;p&gt; -&amp;gt;  &lt;/p&gt;
      &lt;span&gt;classic 방법&lt;br /&gt;
            advice를 적용하기 위해서 매번 advisor를 생성해줘야한다.&lt;br /&gt;
            -&amp;gt; 불편&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class=&quot;listWrapper&quot;&gt;
      &lt;!-- &lt;span style=&quot;font-size: 20px;&quot;&gt;스프링 빈 xml 등록 방법&lt;/span&gt; --&gt;
      &lt;ul class=&quot;imageList&quot;&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring07/ch07_bean_xml_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;pointcut 빈을 생성하며, method명을 지정한다. class=&quot; advisor 빈을 생성 후 advice 할 빈과&lt;br /&gt;
                    pointcut 할 빈을 연결한다.&lt;br /&gt;
                    proxy 빈에 logBeforeAdvice -&amp;gt; classBeforeAdvisor로 변경한다&lt;/span&gt;
            &lt;/div&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring07/ch07_main_class_aop_nobefore_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;SelectService는 before advice 제외된다.&lt;/span&gt;
            &lt;/div&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring07/ch07_main_class_aop_yesbefore_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;poincut 빈에 등록된 method 인 SelectService2 는 before advice 적용된다.&lt;/span&gt;
            &lt;/div&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring07/ch07_bean_xml_02.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;만약 다른 advice도 pointcut을 지정하고 싶으면 advisor을 하나 더 생성 후 적용한다.&lt;/span&gt;
            &lt;/div&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring07/ch07_main_class_aop_nobeforeafter_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;SelectService는 before, after advice 제외된다.&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;span&gt;간소화 방법&lt;br /&gt;
                  advice-pointcut 합치는 방법&lt;/span&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring07/ch07_bean_xml_03.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;다음과 같이 NameMatchMethodPointcutAdvisor class를 이용해서 namematch + advisor 기능을 이용한다.&lt;br /&gt;
                    before advice 경우 SelectService2에만 적용가능하게 설정했으며, &lt;br /&gt;
                    after advice 경우 SelectService2, SelectService3 에 적용을 했다. (mappedName -&amp;gt; mappedNames 변경 후 list-value 구조로 변경)&lt;br /&gt;
                    &lt;br /&gt;
                    실행하게 되면, SelectService는 before, after advice 제외&lt;br /&gt;
                    SelectService2는 before, after advice 모두 적용&lt;br /&gt;
                    SelectService3는 after advice만 적용&lt;/span&gt;
            &lt;/div&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring07/ch07_bean_xml_04.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;RegexpMethodPointcutAdvisor class를 이용해서 정규식을 적용 할 수도 있다.&lt;br /&gt;
                    mappedNames -&amp;gt; patterns 변경 후 .(anycharacter) *(0개이상) -&amp;gt; .*Service2* Method 이름 중에서 해당 패턴이 있는 대상에 대해서만&lt;br /&gt;
                    around advice를 적용한다.&lt;/span&gt;
            &lt;/div&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring07/ch07_main_class_aop_regexp_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;정규 패턴 적용 전에는 SelectService3 에서 around advice 호출 되었지만&lt;br /&gt;
                    정규 패턴 적용 후에는 around advice 제외한다.&lt;br /&gt;&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>BBInJunHwang</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">Spring 강좌는 여러 절로 구성되어 있습니다. spring 시작하기(1) bean 생성 spring 시작하기(2) @annotation spring 시작하기(3) @datasource spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI spring 시작하기(5) DI 3가지 방법 spring 시작하기(6) AOP spring 시작하기(7) AOP PointCut spring 시작하기(8) Spring Profile &amp;lt;!– &amp;lt;div&amp;gt; [스프링] AOP PointCut</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">spring 시작하기(6) AOP</title>
      <link href="http://localhost:4000/spring-06_basic" rel="alternate" type="text/html" title="spring 시작하기(6) AOP" />
      <published>2022-06-12T03:00:00+09:00</published>
      <updated>2022-06-12T03:00:00+09:00</updated>
      <id>http://localhost:4000/spring-06_basic</id>
      <content type="html" xml:base="http://localhost:4000/spring-06_basic">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Spring 강좌는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;!-- _posts/spring/포스트날짜, md 확장자 제외한 파일명--&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-01_basic&quot;&gt;spring 시작하기(1) bean 생성&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-02_basic&quot;&gt;spring 시작하기(2) @annotation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-03_basic&quot;&gt;spring 시작하기(3) @datasource&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-04_basic&quot;&gt;spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-05_basic&quot;&gt;spring 시작하기(5) DI 3가지 방법&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-06_basic&quot;&gt;spring 시작하기(6) AOP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-07_basic&quot;&gt;spring 시작하기(7) AOP PointCut&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-08_basic&quot;&gt;spring 시작하기(8) Spring Profile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- &lt;div&gt;
&lt;br&gt;
&lt;h2&gt;[스프링] AOP&lt;/h2&gt;&lt;br&gt;

AOP란?&lt;br&gt; 
&lt;p align = &quot;justify&quot;&gt;
&lt;font size=3&gt;
Aspect Oriented Programming 관점지향 프로그래밍으로 사용자 기준이 아닌 (사용자가 요구한 업무 로직)&lt;br&gt; 
개발자 필요로 인한 운영을 위한 업무 (주가 아닌 부가업무)&lt;br&gt;
&lt;br&gt;
ex) 로그처리, 권한 처리(보안) 트랜잭션 등 주 업무와 상관없는 업무를 처리한다.&lt;br&gt;
&lt;br&gt;
주 업무 앞과 뒤에 전반적인 처리를 한다.&lt;br&gt;
만약 주 업무 소스코드가 없는 경우 직접 로그나 실행시간 등 코드를 넣을 수 없지만 AOP를 이용하면 업무코드를 수정하지 않아도 꽂아 넣을 수 있다.&lt;br&gt;
사용자는 Proxy를 호출 하면 보조 업무 실행 후 주업무를 호출한다.&lt;br&gt;

&lt;br&gt;
1. 자바 Proxy를 이용한 공통로직 구현&lt;br&gt;
Proxy.newProxyInstance(가져올 클래스 로더, 클래스 인터페이스들, 보조업무)&lt;br&gt;
-&gt; InvocationHandler 이용해서 보조 업무를 정의하며, invoke에서 실제 업무를 호출하며, 결과값을 전달한다.&lt;br&gt;
&lt;br&gt;
proxy.SelectService 호출 시 호출시간을 출력하는 보조 업무가 service 클래스 소스 수정없이 호출된다.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring06/ch06_main_class_aop_01.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;

&lt;br&gt;
2. 스프링 AOP&lt;br&gt;
Before, After returnning, After throwing, Around 4가지가 존재한다.&lt;br&gt;
&lt;br&gt;
먼저 자바 Proxy를 이용한 결과와 동일한 Around로 구현을 해본다.&lt;br&gt;

Component-scan 으로 xml에 빈 설정을 하지않은 service는 xml 상에서 aop 등록시 빈으로 넘겨 줄 수 없기 때문에&lt;br&gt;
service2를 copy 후  xml상 빈으로 등록한다.&lt;br&gt;
target 으로 해당 빈을 ref 넘겨주며, AOP를 적용할 interceptorNames list 구조로 logAroundAdvice 빈을 넘겨준다.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring06/ch06_bean_xml_01.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;

LogAroundAdvice 클래스에는 invoke를 구현한다. 자바 Proxy와 동일하게 Object 로 실행 후 결과값을 넘겨준다.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring06/ch06_advice_class_aop_01.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;

Main 실행 시 동일한 결과가 호출된다.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring06/ch06_main_class_aop_02.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;

before, after, afterThrowing 추가&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring06/ch06_bean_xml_02.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;

before&lt;br&gt;
-&gt; 해당 메소드가 실행되기전 호출 클래스나, 파라마터 등 조회 가능&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring06/ch06_before_class_aop_01.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;

after&lt;br&gt;
-&gt; 해당 메소드 실행 후 호출 클래스나, 파라미터, 결과값등 조회가능&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring06/ch06_after_class_aop_01.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;

afterThrowing&lt;br&gt;
-&gt; 따로 구현메소드는 없으며, exception에 따른 직접 구현을 하면된다 &lt;br&gt;
-&gt; 파라미터가 null 인경우 runtimeException을 발생시켰으며, 해당 부분으로 빠진다.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring06/ch06_afterThrowing_class_aop_01.PNG&apos; alt=&apos;absolute&apos;&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring06/ch06_bean_service_class_01.PNG&apos; alt=&apos;absolute&apos;&gt;

순서는 before -&gt; 메소드 실행 -&gt; after -&gt; around 순&lt;br&gt;

&lt;/font&gt;
&lt;/p&gt;
&lt;/div&gt; --&gt;

&lt;div&gt;
    &lt;header&gt;
      &lt;h2 class=&quot;title&quot;&gt;[스프링] AOP&lt;/h2&gt;&lt;br /&gt;
    &lt;/header&gt;
    &lt;div&gt;
      &lt;h3 class=&quot;subTitle&quot;&gt;AOP란?&lt;/h3&gt;
      &lt;p&gt; -&amp;gt;  Aspect Oriented Programming 관점지향 프로그래밍으로 사용자 기준이 아닌 (사용자가 요구한 업무 로직)&lt;/p&gt;
      &lt;p&gt; -&amp;gt;  개발자 필요로 인한 운영을 위한 업무 (주가 아닌 부가업무)&lt;/p&gt;
      &lt;p&gt; -&amp;gt;  ex) 로그처리, 권한 처리(보안) 트랜잭션 등 주 업무와 상관없는 업무를 처리한다.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&quot;listWrapper&quot;&gt;
      &lt;span style=&quot;font-size: 20px;&quot;&gt;주 업무 앞과 뒤에 전반적인 처리를 한다.&lt;br /&gt;
                                    만약 주 업무 소스코드가 없는 경우 직접 로그나 실행시간 등 코드를 넣을 수 없지만 AOP를 이용하면 업무코드를 수정하지 않아도 꽂아 넣을 수 있다.&lt;br /&gt;
                                    사용자는 Proxy를 호출 하면 보조 업무 실행 후 주업무를 호출한다.&lt;/span&gt;
      &lt;ul class=&quot;imageList&quot;&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;span&gt;1. 자바 Proxy를 이용한 공통로직 구현&lt;/span&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring06/ch06_main_class_aop_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;Proxy.newProxyInstance(가져올 클래스 로더, 클래스 인터페이스들, 보조업무)&lt;br /&gt;
                    -&amp;gt; InvocationHandler 이용해서 보조 업무를 정의하며, invoke에서 실제 업무를 호출하며, 결과값을 전달한다.&lt;br /&gt;
                    &lt;br /&gt;
                    proxy.SelectService 호출 시 호출시간을 출력하는 보조 업무가 service 클래스 소스 수정없이 호출된다.&lt;br /&gt;&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;span&gt;2. 스프링 AOP
            Before, After returnning, After throwing, Around 4가지가 존재한다.&lt;br /&gt;
            &lt;br /&gt;
            먼저 자바 Proxy를 이용한 결과와 동일한 Around로 구현을 해본다.&lt;br /&gt;&lt;/span&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring06/ch06_bean_xml_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;Component-scan 으로 xml에 빈 설정을 하지않은 service는 xml 상에서 aop 등록시 빈으로 넘겨 줄 수 없기 때문에&lt;br /&gt;
                service2를 copy 후  xml상 빈으로 등록한다.&lt;br /&gt;
                target 으로 해당 빈을 ref 넘겨주며, AOP를 적용할 interceptorNames list 구조로 logAroundAdvice 빈을 넘겨준다.&lt;br /&gt;&lt;/span&gt;
            &lt;/div&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring06/ch06_advice_class_aop_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;LogAroundAdvice 클래스에는 invoke를 구현한다. 자바 Proxy와 동일하게 Object 로 실행 후 결과값을 넘겨준다.&lt;/span&gt;
            &lt;/div&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring06/ch06_main_class_aop_02.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;Main 실행 시 동일한 결과가 호출된다.&lt;/span&gt;
            &lt;/div&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring06/ch06_bean_xml_02.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;before, after, afterThrowing 추가&lt;/span&gt;
            &lt;/div&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring06/ch06_before_class_aop_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;before&lt;br /&gt;
                    -&amp;gt; 해당 메소드가 실행되기전 호출 클래스나, 파라마터 등 조회 가능&lt;/span&gt;
            &lt;/div&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring06/ch06_after_class_aop_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;after&lt;br /&gt;
                    -&amp;gt; 해당 메소드 실행 후 호출 클래스나, 파라미터, 결과값등 조회가능&lt;/span&gt;
            &lt;/div&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring06/ch06_afterThrowing_class_aop_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring06/ch06_bean_service_class_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;afterThrowing&lt;br /&gt;
                    -&amp;gt; 따로 구현메소드는 없으며, exception에 따른 직접 구현을 하면된다 &lt;br /&gt;
                    -&amp;gt; 파라미터가 null 인경우 runtimeException을 발생시켰으며, 해당 부분으로 빠진다.&lt;br /&gt;
                    순서는 before -&amp;gt; 메소드 실행 -&amp;gt; after -&amp;gt; around 순&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>BBInJunHwang</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">Spring 강좌는 여러 절로 구성되어 있습니다. spring 시작하기(1) bean 생성 spring 시작하기(2) @annotation spring 시작하기(3) @datasource spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI spring 시작하기(5) DI 3가지 방법 spring 시작하기(6) AOP spring 시작하기(7) AOP PointCut spring 시작하기(8) Spring Profile &amp;lt;!– &amp;lt;div&amp;gt; [스프링] AOP</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">spring 시작하기(5) DI 3가지 방법</title>
      <link href="http://localhost:4000/spring-05_basic" rel="alternate" type="text/html" title="spring 시작하기(5) DI 3가지 방법" />
      <published>2022-06-12T03:00:00+09:00</published>
      <updated>2022-06-12T03:00:00+09:00</updated>
      <id>http://localhost:4000/spring-05_basic</id>
      <content type="html" xml:base="http://localhost:4000/spring-05_basic">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Spring 강좌는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;!-- _posts/spring/포스트날짜, md 확장자 제외한 파일명--&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-01_basic&quot;&gt;spring 시작하기(1) bean 생성&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-02_basic&quot;&gt;spring 시작하기(2) @annotation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-03_basic&quot;&gt;spring 시작하기(3) @datasource&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-04_basic&quot;&gt;spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-05_basic&quot;&gt;spring 시작하기(5) DI 3가지 방법&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-06_basic&quot;&gt;spring 시작하기(6) AOP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-07_basic&quot;&gt;spring 시작하기(7) AOP PointCut&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-08_basic&quot;&gt;spring 시작하기(8) Spring Profile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- &lt;div&gt;
&lt;h2&gt;[스프링] DI 3가지 방법&lt;/h2&gt;&lt;br&gt;

DI 3가지 방법을 설명한다.&lt;br&gt;


&lt;p align = &quot;justify&quot;&gt;
&lt;font size=3&gt;
아래와 같이 Component-scan 과 base package 를 설정해주면 @Component, @Service, @Repository 등&lt;br&gt;
빈으로 선언한 클래스를 스캔 후 빈으로 등록한다.&lt;br&gt;&lt;br&gt;
context:annotation-config 과 다른점은 annotation-config은 xml 등 이미 선언된 빈에 대해서
@Autowired 등 자동 주입을 진행해주기 떄문에 반드시 미리 빈을 선언 해놓아야 한다.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot;  data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring05/ch05_bean_xml_01.PNG&apos; alt=&apos;absolute&apos;&gt;

1. 필드주입 &lt;br&gt;
-&gt; dao 클래스에서 @Autowired private List userList 필드부분에 선언&lt;br&gt;
-&gt; service 클래스에 @Autowired private CommonDao commonDao 필드부분에 선언&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot;  data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring05/ch05_bean_dao_class_field_01.PNG&apos; alt=&apos;absolute&apos;&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot;  data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring05/ch05_bean_service_class_field_01.PNG&apos; alt=&apos;absolute&apos;&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot;  data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring05/ch05_bean_main_class_01.PNG&apos; alt=&apos;absolute&apos;&gt;


2. setter 주입 &lt;br&gt;
-&gt; dao 클래스에서 @Autowired setUserList 부분에 선언 &lt;br&gt;
-&gt; service 클래스에서 @Autowired setCommonDao 부분에 선언 &lt;br&gt;
※ dao 클래스에서 @Autowired 대신 @Resource 사용해도 동일하며 &lt;br&gt;
@Autowired는 타입 &gt; name 순서,
@Resource는 name &gt; 타입 순서로 탐색하며 @Resource 사용시 빈 name을 명시해주는게 좋다.
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot;  data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring05/ch05_bean_dao_class_setter_01.PNG&apos; alt=&apos;absolute&apos;&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot;  data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring05/ch05_bean_service_class_setter_01.PNG&apos; alt=&apos;absolute&apos;&gt;

3. 생성자 주입&lt;br&gt;
-&gt; dao 클래스에서 생성자로 userList를 받은 후 설정한다. &lt;br&gt;
-&gt; service 클래스에서 생성자로 commonDao를 받은 후 설정한다. &lt;br&gt;
※ 생성자 주입에서는 @Autowired, @Resource 등 어노테이션 생략이 가능하다. (단 반드시 단일생성자일때만 )
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot;  data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring05/ch05_bean_dao_class_constructor_01.PNG&apos; alt=&apos;absolute&apos;&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot;  data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring05/ch05_bean_service_class_constructor_01.PNG&apos; alt=&apos;absolute&apos;&gt;


필드주입 vs setter 주입 vs 생성자 주입

필드 주입&lt;br&gt;
장점 - 코드양이 적다.&lt;br&gt;
단점 - final 키워드 사용 불가, 의존관계 파악 불가, 순환참조 탐지불가 (서버 정상기동, 호출시 stackOverFlowError 발생)&lt;br&gt;
     - 순환참조 방지 패치 -&gt; 기존에 호출 시 A빈이 B빈을 참조하고, B빈이 A빈을 참조할 시 호출되는 시점에서 무한참조로 에러가 발생했지만,&lt;br&gt;
       후에 스프링 부트2.6에서는 서버 기동시 cycle형성으로 기동 실패로 나온다.&lt;br&gt;

setter 주입&lt;br&gt;
장점 - ??&lt;br&gt;
단점 - final 키워드 사용 불가&lt;br&gt;

생성자 주입&lt;br&gt;
장점 -  final 키워드 사용 가능 -&gt; 다른 클래스에서 호출시 불변적용 가능&lt;br&gt;
    -  ※NPE 방지
     - 보통 필드에 @Autowired를 붙이는 경우가 많지만, 생성자 주입을 사용하도록 노력하자&lt;br&gt;
단점 - 코드가 조금 길어진다.&lt;br&gt;

생성자 주입을 통한 NPE 방지란?

먼저 아래와 같이 setter 주입을 예시로 했으며, 필드주입도 동일한 현상이 일어난다.&lt;br&gt;
dao 클래스 @Repository 주석 처리를 통한 빈등록 x &lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot;  data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring05/ch05_bean_dao_class_notBean_01.PNG&apos; alt=&apos;absolute&apos;&gt;
service 클래스 setCommonDao를 통한 dao 주입&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot;  data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring05/ch05_bean_service_class_setter_02.PNG&apos; alt=&apos;absolute&apos;&gt;
기동 시 dao 클래스는 null 인상태로 주입되며, service 클래스에서 호출되기 전까지 null인지 알 수 없음&lt;br&gt;
실제 서버 기동 후 해당 클래스가 호출될 때 알 수 있다.(런타임 에러시 발견)
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot;  data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring05/ch05_bean_service_class_setter_NPE_01.PNG&apos; alt=&apos;absolute&apos;&gt;

생성자 주입 시 아래와 같이 생성과 동시에 주입 되며, 컴파일 시 에러 발생을 통한 미리 알 수 있다.&lt;br&gt;
실제로 서비스를 운영하는 시점에서 서버가 정상기동되면 놓칠 수 있는 부분이기 때문에, 컴파일 자체에서 에러가 나면 바로 인지 및 패치가 가능하다.
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot;  data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring05/ch05_bean_service_class_constructor_02.PNG&apos; alt=&apos;absolute&apos;&gt;
&lt;/font&gt;
&lt;/p&gt;
&lt;/div&gt; --&gt;

&lt;div&gt;
    &lt;header&gt;
      &lt;h2 class=&quot;title&quot;&gt;[스프링] DI 3가지 방법&lt;/h2&gt;&lt;br /&gt;
    &lt;/header&gt;
    &lt;div&gt;
      &lt;h3 class=&quot;subTitle&quot;&gt;DI 3가지 방법을 설명한다.&lt;/h3&gt;
      &lt;p&gt; -&amp;gt;  필드주입&lt;/p&gt;
      &lt;p&gt; -&amp;gt;  setter 주입&lt;/p&gt;
      &lt;p&gt; -&amp;gt;  생성자 주입&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&quot;listWrapper&quot;&gt;
      &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring05/ch05_bean_xml_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
      &lt;span style=&quot;font-size: 20px;&quot;&gt;아래와 같이 Component-scan 과 base package 를 설정해주면 @Component, @Service, @Repository 등&lt;br /&gt;
                                   빈으로 선언한 클래스를 스캔 후 빈으로 등록한다.&lt;br /&gt;&lt;br /&gt;
                                   context:annotation-config 과 다른점은 annotation-config은 xml 등 이미 선언된 빈에 대해서
                                   @Autowired 등 자동 주입을 진행해주기 떄문에 반드시 미리 빈을 선언 해놓아야 한다.&lt;/span&gt;
      &lt;ul class=&quot;imageList&quot;&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;span&gt;1. 필드주입 &lt;br /&gt;&lt;/span&gt; 
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring05/ch05_bean_dao_class_field_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring05/ch05_bean_service_class_field_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring05/ch05_bean_main_class_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;-&amp;gt; dao 클래스에서 @Autowired private List userList 필드부분에 선언&lt;br /&gt;
                    -&amp;gt; service 클래스에 @Autowired private CommonDao commonDao 필드부분에 선언&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;span&gt;2. setter 주입 &lt;br /&gt;&lt;/span&gt; 
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring05/ch05_bean_dao_class_setter_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring05/ch05_bean_service_class_setter_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;-&amp;gt; dao 클래스에서 @Autowired setUserList 부분에 선언 &lt;br /&gt;
                    -&amp;gt; service 클래스에서 @Autowired setCommonDao 부분에 선언 &lt;br /&gt;
                    ※ dao 클래스에서 @Autowired 대신 @Resource 사용해도 동일하며 &lt;br /&gt;
                    @Autowired는 타입 &amp;gt; name 순서,
                    @Resource는 name &amp;gt; 타입 순서로 탐색하며 @Resource 사용시 빈 name을 명시해주는게 좋다.&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;span&gt;3. 생성자 주입 &lt;br /&gt;&lt;/span&gt; 
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring05/ch05_bean_dao_class_constructor_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring05/ch05_bean_service_class_constructor_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;-&amp;gt; dao 클래스에서 생성자로 userList를 받은 후 설정한다. &lt;br /&gt;
                    -&amp;gt; service 클래스에서 생성자로 commonDao를 받은 후 설정한다. &lt;br /&gt;
                    ※ 생성자 주입에서는 @Autowired, @Resource 등 어노테이션 생략이 가능하다. (단 반드시 단일생성자일때만 )&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;div&gt;
              &lt;span&gt;필드주입 vs setter 주입 vs 생성자 주입&lt;br /&gt;
               1. 필드 주입&lt;br /&gt;
               장점 - 코드양이 적다.&lt;br /&gt;
               단점 - final 키워드 사용 불가, 의존관계 파악 불가, 순환참조 탐지불가 (서버 정상기동, 호출시 stackOverFlowError 발생)&lt;br /&gt;
                    - 순환참조 방지 패치 -&amp;gt; 기존에 호출 시 A빈이 B빈을 참조하고, B빈이 A빈을 참조할 시 호출되는 시점에서 무한참조로 에러가 발생했지만,&lt;br /&gt;
                    후에 스프링 부트2.6에서는 서버 기동시 cycle형성으로 기동 실패로 나온다.&lt;br /&gt;
               &lt;br /&gt;
               2. setter 주입&lt;br /&gt;
               장점 - ??&lt;br /&gt;
               단점 - final 키워드 사용 불가&lt;br /&gt;
               &lt;br /&gt;
               3. 생성자 주입&lt;br /&gt;
               장점 -  final 키워드 사용 가능 -&amp;gt; 다른 클래스에서 호출시 불변적용 가능&lt;br /&gt;
               -  ※NPE 방지
                    - 보통 필드에 @Autowired를 붙이는 경우가 많지만, 생성자 주입을 사용하도록 노력하자&lt;br /&gt;
               단점 - 코드가 조금 길어진다.&lt;br /&gt;
               &lt;br /&gt;
               생성자 주입을 통한 NPE 방지란?
               &lt;br /&gt;
               먼저 아래와 같이 setter 주입을 예시로 했으며, 필드주입도 동일한 현상이 일어난다.&lt;br /&gt;
               dao 클래스 @Repository 주석 처리를 통한 빈등록 x &lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring05/ch05_bean_dao_class_notBean_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;service 클래스 setCommonDao를 통한 dao 주입&lt;/span&gt;
            &lt;/div&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring05/ch05_bean_service_class_setter_02.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;기동 시 dao 클래스는 null 인상태로 주입되며, service 클래스에서 호출되기 전까지 null인지 알 수 없음&lt;br /&gt;
                    실제 서버 기동 후 해당 클래스가 호출될 때 알 수 있다.(런타임 에러시 발견)&lt;/span&gt;
            &lt;/div&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring05/ch05_bean_service_class_setter_NPE_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring05/ch05_bean_service_class_constructor_02.PNG&quot; alt=&quot;absolute&quot; /&gt;  
            &lt;div&gt;
              &lt;span&gt;생성자 주입 시 아래와 같이 생성과 동시에 주입 되며, 컴파일 시 에러 발생을 통한 미리 알 수 있다.&lt;br /&gt;
                    실제로 서비스를 운영하는 시점에서 서버가 정상기동되면 놓칠 수 있는 부분이기 때문에, 컴파일 자체에서 에러가 나면 바로 인지 및 패치가 가능하다.&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>BBInJunHwang</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">Spring 강좌는 여러 절로 구성되어 있습니다. spring 시작하기(1) bean 생성 spring 시작하기(2) @annotation spring 시작하기(3) @datasource spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI spring 시작하기(5) DI 3가지 방법 spring 시작하기(6) AOP spring 시작하기(7) AOP PointCut spring 시작하기(8) Spring Profile &amp;lt;!– &amp;lt;div&amp;gt; [스프링] DI 3가지 방법</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI</title>
      <link href="http://localhost:4000/spring-04_basic" rel="alternate" type="text/html" title="spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI" />
      <published>2022-06-12T03:00:00+09:00</published>
      <updated>2022-06-12T03:00:00+09:00</updated>
      <id>http://localhost:4000/spring-04_basic</id>
      <content type="html" xml:base="http://localhost:4000/spring-04_basic">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Spring 강좌는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;!-- _posts/spring/포스트날짜, md 확장자 제외한 파일명--&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-01_basic&quot;&gt;spring 시작하기(1) bean 생성&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-02_basic&quot;&gt;spring 시작하기(2) @annotation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-03_basic&quot;&gt;spring 시작하기(3) @datasource&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-04_basic&quot;&gt;spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-05_basic&quot;&gt;spring 시작하기(5) DI 3가지 방법&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-06_basic&quot;&gt;spring 시작하기(6) AOP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-07_basic&quot;&gt;spring 시작하기(7) AOP PointCut&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-08_basic&quot;&gt;spring 시작하기(8) Spring Profile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- &lt;div&gt;
&lt;br&gt;
&lt;h2&gt;[스프링] ArrayList 빈생성 및 component 스캔과 Service-dao간 DI&lt;/h2&gt;&lt;br&gt;

&lt;p align = &quot;justify&quot;&gt;
&lt;font size=3&gt;
ArrayList 형으로 빈 생성 가능하며 아래와 같이 userList bean 생성 로직이다.&lt;br&gt;
-&gt; class=java.util.ArrayList 로 List형의 빈이며, 절대로 UserVO 타입의 빈이 아니다.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring04/ch04_bean_xml_01.PNG&apos; alt=&apos;absolute&apos;&gt;

다음과 같이  applicationContext에서 빈을 가져올때 빈 id 와 type 모두 가져올 수 있지만&lt;br&gt;
List.class 타입을 가진 bean이 2개 존재 -&gt; userList, userList2 해당 경우는 에러가 발생할 수 있다.&lt;br&gt;
-&gt; 타입으로 찾게되면 동일 타입 빈 중 어떤걸 가져와야 할지 모르기 떄문, 그렇기 때문에 명시 해주자.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring04/ch04_bean_class_01.PNG&apos; alt=&apos;absolute&apos;&gt;


아래와 같이 Component-scan 과 base package 를 설정해주면 @Component, @Service, @Repository 등&lt;br&gt;
빈으로 선언한 클래스를 스캔 후 빈으로 등록한다.
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring04/ch04_bean_xml_02.PNG&apos; alt=&apos;absolute&apos;&gt;

base package에 선언된 dao,service 클래스들은 모두 빈으로 등록되었으며, &lt;br&gt;
service -&gt; @Autowired를 통한 dao 클래스 의존성 주입&lt;br&gt;
dao -&gt; @Autowired 통한 List빈이 주입&lt;br&gt;
main 클래스에서 getBean을 통해 service 빈을 가져온 후 최종 return
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring04/ch04_bean_dao_class_01.PNG&apos; alt=&apos;absolute&apos;&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring04/ch04_bean_service_class_01.PNG&apos; alt=&apos;absolute&apos;&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring04/ch04_bean_main_class_01.PNG&apos; alt=&apos;absolute&apos;&gt;

&lt;/font&gt;
&lt;/p&gt;
&lt;/div&gt; --&gt;

&lt;div&gt;
    &lt;header&gt;
      &lt;h2 class=&quot;title&quot;&gt;[스프링] ArrayList 빈생성 및 component 스캔과 Service-dao간 DI&lt;/h2&gt;&lt;br /&gt;
    &lt;/header&gt;
    &lt;!-- &lt;div&gt;
      &lt;h3 class=&quot;subTitle&quot;&gt;스프링 빈이란?&lt;/h3&gt;
      &lt;p&gt; -&gt;  스프링 IOC 컨테이너가 관리하는 자바객체&lt;/p&gt;
      &lt;p&gt; -&gt;  New로 생성한 객체가 아님&lt;/p&gt;
      &lt;p&gt; -&gt;  ApplicationContext 로 얻을 수 있음&lt;/p&gt;
    &lt;/div&gt; --&gt;
    &lt;div class=&quot;listWrapper&quot;&gt;
      &lt;!-- &lt;span style=&quot;font-size: 20px;&quot;&gt;스프링 빈 xml 등록 방법&lt;/span&gt; --&gt;
      &lt;ul class=&quot;imageList&quot;&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring04/ch04_bean_xml_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;ArrayList 형으로 빈 생성 가능하며 아래와 같이 userList bean 생성 로직이다.&lt;br /&gt;
                    -&amp;gt; class=java.util.ArrayList 로 List형의 빈이며, 절대로 UserVO 타입의 빈이 아니다.&lt;br /&gt;&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring04/ch04_bean_class_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;다음과 같이  applicationContext에서 빈을 가져올때 빈 id 와 type 모두 가져올 수 있지만&lt;br /&gt;
                    List.class 타입을 가진 bean이 2개 존재 -&amp;gt; userList, userList2 해당 경우는 에러가 발생할 수 있다.&lt;br /&gt;
                    -&amp;gt; 타입으로 찾게되면 동일 타입 빈 중 어떤걸 가져와야 할지 모르기 떄문, 그렇기 때문에 명시 해주자&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring04/ch04_bean_xml_02.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;아래와 같이 Component-scan 과 base package 를 설정해주면 @Component, @Service, @Repository 등&lt;br /&gt;
                    빈으로 선언한 클래스를 스캔 후 빈으로 등록한다.&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring04/ch04_bean_dao_class_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring04/ch04_bean_service_class_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring04/ch04_bean_main_class_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;base package에 선언된 dao,service 클래스들은 모두 빈으로 등록되었으며, &lt;br /&gt;
                    service -&amp;gt; @Autowired를 통한 dao 클래스 의존성 주입&lt;br /&gt;
                    dao -&amp;gt; @Autowired 통한 List빈이 주입&lt;br /&gt;
                    main 클래스에서 getBean을 통해 service 빈을 가져온 후 최종 return&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>BBInJunHwang</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">Spring 강좌는 여러 절로 구성되어 있습니다. spring 시작하기(1) bean 생성 spring 시작하기(2) @annotation spring 시작하기(3) @datasource spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI spring 시작하기(5) DI 3가지 방법 spring 시작하기(6) AOP spring 시작하기(7) AOP PointCut spring 시작하기(8) Spring Profile &amp;lt;!– &amp;lt;div&amp;gt; [스프링] ArrayList 빈생성 및 component 스캔과 Service-dao간 DI</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">spring 시작하기(3) @datasource</title>
      <link href="http://localhost:4000/spring-03_basic" rel="alternate" type="text/html" title="spring 시작하기(3) @datasource" />
      <published>2022-06-12T03:00:00+09:00</published>
      <updated>2022-06-12T03:00:00+09:00</updated>
      <id>http://localhost:4000/spring-03_basic</id>
      <content type="html" xml:base="http://localhost:4000/spring-03_basic">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Spring 강좌는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;!-- _posts/spring/포스트날짜, md 확장자 제외한 파일명--&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-01_basic&quot;&gt;spring 시작하기(1) bean 생성&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-02_basic&quot;&gt;spring 시작하기(2) @annotation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-03_basic&quot;&gt;spring 시작하기(3) @datasource&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-04_basic&quot;&gt;spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-05_basic&quot;&gt;spring 시작하기(5) DI 3가지 방법&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-06_basic&quot;&gt;spring 시작하기(6) AOP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-07_basic&quot;&gt;spring 시작하기(7) AOP PointCut&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-08_basic&quot;&gt;spring 시작하기(8) Spring Profile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- &lt;div&gt;
&lt;br&gt;
&lt;h2&gt;[스프링] @datasource 설정&lt;/h2&gt;&lt;br&gt;

&lt;p align = &quot;justify&quot;&gt;
&lt;font size=3&gt;
dataSource 설정 -&gt; dsForCommon 명으로 DB 연결정보 설정한다.&lt;br&gt;
value 값은 Properties 값을 읽어온다.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring03/ch03_bean_xml_01.PNG&apos; alt=&apos;absolute&apos;&gt;
&lt;/font&gt;
&lt;/p&gt;

&lt;p align = &quot;justify&quot;&gt;
&lt;font size=3&gt;
SqlSessionFactoryBean 사용해서 mybatis &lt;-&gt; spring 연동한다. &lt;br&gt;
ref=dsForCommon명으로 연결정보를 넘겨주며, &lt;br&gt;
configLocation 설정을 통해 VO alias 등 설정 가능하다.&lt;br&gt;
mapperLocations 설정을 통해서 매퍼관련 자원 위치를 설정하면 xml 읽고 로드한다.&lt;br&gt;
mapperLocation 경우 list 가 아닌 단일 value로 설정한다.&lt;br&gt;
&lt;br&gt;
SqlSessionTemplate은 mybatis 연동모듈 핵심이며, sqlSession 생성하고 트랜잭션을 관리한다.&lt;br&gt;
또한 SqlSession을 구현하며, 대체하는 역할을 하며 쓰레드에 안전하게 여러개의 DAO나 매퍼에서 공유된다.&lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring03/ch03_bean_xml_02.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;


아래는 트랜잭션을 처리하는 설정으로 sqlSessionFactory 객체를 넘겨준다.&lt;br&gt;
선언적 트랜잭션 처리 방법으로 AOP를 사용한다.&lt;br&gt;
트랜잭션을 실행하는 대상 Method 설정하며, insert,update,delete 로 시작하는 method에 트랜잭션을 설정한다.&lt;br&gt;
&lt;br&gt;
기본 rollback 은 checked Exception에 적용이 안되며, runtimeException에만 적용&lt;br&gt;
-&gt; 모든 예외를 두고 싶다면 Exception으로 적용 필요 &lt;br&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring03/ch03_bean_xml_03.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;
AOP pointcut 으로 적용할 범위를 지정가능하다.
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring03/ch03_bean_xml_04.PNG&apos; alt=&apos;absolute&apos;&gt;
&lt;/font&gt;
&lt;/p&gt;

&lt;p align = &quot;justify&quot;&gt;
&lt;font size=3&gt;
@Transaction 어노테이션을 사용한 트랜잭션 관리 -&gt; 차후 추가예정
&lt;/font&gt;
&lt;/p&gt;
&lt;/div&gt; --&gt;

&lt;div&gt;
    &lt;header&gt;
      &lt;h2 class=&quot;title&quot;&gt;[스프링] @datasource 설정&lt;/h2&gt;&lt;br /&gt;
    &lt;/header&gt;
    &lt;!-- &lt;div&gt;
      &lt;h3 class=&quot;subTitle&quot;&gt;스프링 빈이란?&lt;/h3&gt;
      &lt;p&gt; -&gt;  스프링 IOC 컨테이너가 관리하는 자바객체&lt;/p&gt;
      &lt;p&gt; -&gt;  New로 생성한 객체가 아님&lt;/p&gt;
      &lt;p&gt; -&gt;  ApplicationContext 로 얻을 수 있음&lt;/p&gt;
    &lt;/div&gt; --&gt;
    &lt;div class=&quot;listWrapper&quot;&gt;
      &lt;!-- &lt;span style=&quot;font-size: 20px;&quot;&gt;스프링 빈 xml 등록 방법&lt;/span&gt; --&gt;
      &lt;ul class=&quot;imageList&quot;&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring03/ch03_bean_xml_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;dataSource 설정 -&amp;gt; dsForCommon 명으로 DB 연결정보 설정한다.&lt;br /&gt;
                    value 값은 Properties 값을 읽어온다.&lt;br /&gt;&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;div&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring03/ch03_bean_xml_02.PNG&quot; alt=&quot;absolute&quot; /&gt;   
              &lt;span&gt;SqlSessionFactoryBean 사용해서 mybatis &amp;lt;-&amp;gt; spring 연동한다. &lt;br /&gt;
                    ref=dsForCommon명으로 연결정보를 넘겨주며, &lt;br /&gt;
                    configLocation 설정을 통해 VO alias 등 설정 가능하다.&lt;br /&gt;
                    mapperLocations 설정을 통해서 매퍼관련 자원 위치를 설정하면 xml 읽고 로드한다.&lt;br /&gt;
                    mapperLocation 경우 list 가 아닌 단일 value로 설정한다.&lt;br /&gt;
                    &lt;br /&gt;
                    SqlSessionTemplate은 mybatis 연동모듈 핵심이며, sqlSession 생성하고 트랜잭션을 관리한다.&lt;br /&gt;
                    또한 SqlSession을 구현하며, 대체하는 역할을 하며 쓰레드에 안전하게 여러개의 DAO나 매퍼에서 공유된다.&lt;br /&gt;&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring03/ch03_bean_xml_03.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;아래는 트랜잭션을 처리하는 설정으로 sqlSessionFactory 객체를 넘겨준다.&lt;br /&gt;
                    선언적 트랜잭션 처리 방법으로 AOP를 사용한다.&lt;br /&gt;
                    트랜잭션을 실행하는 대상 Method 설정하며, insert,update,delete 로 시작하는 method에 트랜잭션을 설정한다.&lt;br /&gt;
                    &lt;br /&gt;
                    기본 rollback 은 checked Exception에 적용이 안되며, runtimeException에만 적용&lt;br /&gt;
                    -&amp;gt; 모든 예외를 두고 싶다면 Exception으로 적용 필요 &lt;br /&gt;&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring03/ch03_bean_xml_04.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;AOP pointcut 으로 적용할 범위를 지정가능하다.&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>BBInJunHwang</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">Spring 강좌는 여러 절로 구성되어 있습니다. spring 시작하기(1) bean 생성 spring 시작하기(2) @annotation spring 시작하기(3) @datasource spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI spring 시작하기(5) DI 3가지 방법 spring 시작하기(6) AOP spring 시작하기(7) AOP PointCut spring 시작하기(8) Spring Profile &amp;lt;!– &amp;lt;div&amp;gt; [스프링] @datasource 설정</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">spring 시작하기(2) @annotation</title>
      <link href="http://localhost:4000/spring-02_basic" rel="alternate" type="text/html" title="spring 시작하기(2) @annotation" />
      <published>2022-06-12T03:00:00+09:00</published>
      <updated>2022-06-12T03:00:00+09:00</updated>
      <id>http://localhost:4000/spring-02_basic</id>
      <content type="html" xml:base="http://localhost:4000/spring-02_basic">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Spring 강좌는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;!-- _posts/spring/포스트날짜, md 확장자 제외한 파일명--&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-01_basic&quot;&gt;spring 시작하기(1) bean 생성&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-02_basic&quot;&gt;spring 시작하기(2) @annotation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-03_basic&quot;&gt;spring 시작하기(3) @datasource&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-04_basic&quot;&gt;spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-05_basic&quot;&gt;spring 시작하기(5) DI 3가지 방법&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-06_basic&quot;&gt;spring 시작하기(6) AOP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-07_basic&quot;&gt;spring 시작하기(7) AOP PointCut&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-08_basic&quot;&gt;spring 시작하기(8) Spring Profile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- &lt;div&gt;
&lt;br&gt;
&lt;h2&gt;[스프링] @Autowired / @Resource&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;Annotation 이란?&lt;/p&gt;
&lt;p align = &quot;justify&quot;&gt;
&lt;font size=3&gt;
-&gt; Annotation은 자바 소스 코드에 추가하여 사용할 수 있는 메타데이터의 일종&lt;br&gt;
-&gt; 스프링에서 빈 인스턴스가 생성된 이후 @Autowired를 설정한 메서드가 자동으로 호출, 인스턴스가 자동으로 주입
&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;
&lt;font size=3&gt;
xml 설정과 같이 기존 service 에 주입되던 dao 빈을 주석처리 해도 정상적으로 주입이 가능하다.&lt;br&gt;
@Autowired로 의존 관계를 주입받을 경우, context:component scan  태그를 사용해야한다.
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring02/ch02_bean_xml_01.PNG&apos; alt=&apos;absolute&apos;&gt;&lt;br&gt;

생성자 주입, setter 주입 등 생략이 되어도 @Autowired 통해 필드에 주입 후 사용이 가능하다.&lt;br&gt;
-&gt; 차후 생성자,setter,필드 주입간의 차이점 추가할 예정이며, 생성자 주입을 사용을 권장한다.&lt;br&gt;
ex) 아래는 @Autowired를 이용한 필드 주입 예시
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&apos;/assets/images/spring/spring02/ch02_bean_class_01.PNG&apos; alt=&apos;absolute&apos;&gt;
&lt;/font&gt;
&lt;/p&gt;

@Autowired / @Resource
&lt;p&gt;
&lt;font size=3&gt;
@Autowired는 타입(class 타입)으로 의존성 주입하며, 변수, 생성자, Setter메서드, 일반 메서드 사용 가능하다.&lt;br&gt;
타입 &gt; name 순으로 찾기 떄문에 같은 타입 2개이상 빈이 존재하면 에러가 발생한다.&lt;br&gt;
ex) 같은 클래스로 2개이상 빈이 등록 시 동일 타입 빈 중 어떤 빈을 사용해야 할지 모른다.&lt;br&gt;
bean id=&quot;test1&quot; class=&quot;com.ijhwang.userDao&quot;&lt;br&gt;
bean id=&quot;test2&quot; class=&quot;com.ijhwang.userDao&quot;&lt;br&gt;
&lt;br&gt;
해당 부분 해결을 위한 @Qualifier(&quot;test1&quot;) 이용해서 사용할 빈 설정이 가능하며, required=false 값을 통해&lt;br&gt;
빈이 검색되지 않았을 시 에러도 방지한다.&lt;br&gt;
&lt;br&gt;
@Resource는 이름으로 주입하며, 변수, Setter메서드등에 적용 가능하다.&lt;br&gt;
@Resource(name=&quot;빈명&quot;) 으로 사용 가능&lt;br&gt;
name 설정이 없다면 name &gt; 타입 순으로 찾아준다.
&lt;/font&gt;
&lt;/p&gt;
&lt;/div&gt; --&gt;

&lt;div&gt;
    &lt;header&gt;
      &lt;h2 class=&quot;title&quot;&gt;[스프링] @Autowired / @Resource&lt;/h2&gt;&lt;br /&gt;
    &lt;/header&gt;
    &lt;div&gt;
      &lt;h3 class=&quot;subTitle&quot;&gt;Annotation 이란?&lt;/h3&gt;
      &lt;p&gt; -&amp;gt;  Annotation은 자바 소스 코드에 추가하여 사용할 수 있는 메타데이터의 일종&lt;/p&gt;
      &lt;p&gt; -&amp;gt;  스프링에서 빈 인스턴스가 생성된 이후 @Autowired를 설정한 메서드가 자동으로 호출, 인스턴스가 자동으로 주입&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&quot;listWrapper&quot;&gt;
      &lt;span style=&quot;font-size: 20px;&quot;&gt;스프링 빈 xml 등록 방법&lt;/span&gt;
      &lt;ul class=&quot;imageList&quot;&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring02/ch02_bean_xml_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;xml 설정과 같이 기존 service 에 주입되던 dao 빈을 주석처리 해도 정상적으로 주입이 가능하다.&lt;br /&gt;
                    @Autowired로 의존 관계를 주입받을 경우, context:component scan  태그를 사용해야한다.&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring02/ch02_bean_class_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;생성자 주입, setter 주입 등 생략이 되어도 @Autowired 통해 필드에 주입 후 사용이 가능하다.&lt;br /&gt;
                -&amp;gt; 차후 생성자,setter,필드 주입간의 차이점 추가할 예정이며, 생성자 주입을 사용을 권장한다.&lt;br /&gt;
                ex) 아래는 @Autowired를 이용한 필드 주입 예시&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;div&gt;
              &lt;span&gt;@Autowired / @Resource
                @Autowired는 타입(class 타입)으로 의존성 주입하며, 변수, 생성자, Setter메서드, 일반 메서드 사용 가능하다.&lt;br /&gt;
                타입 &amp;gt; name 순으로 찾기 떄문에 같은 타입 2개이상 빈이 존재하면 에러가 발생한다.&lt;br /&gt;
                ex) 같은 클래스로 2개이상 빈이 등록 시 동일 타입 빈 중 어떤 빈을 사용해야 할지 모른다.&lt;br /&gt;
                bean id=&quot;test1&quot; class=&quot;com.ijhwang.userDao&quot;&lt;br /&gt;
                bean id=&quot;test2&quot; class=&quot;com.ijhwang.userDao&quot;&lt;br /&gt;
                &lt;br /&gt;
                해당 부분 해결을 위한 @Qualifier(&quot;test1&quot;) 이용해서 사용할 빈 설정이 가능하며, required=false 값을 통해&lt;br /&gt;
                빈이 검색되지 않았을 시 에러도 방지한다.&lt;br /&gt;
                &lt;br /&gt;
                @Resource는 이름으로 주입하며, 변수, Setter메서드등에 적용 가능하다.&lt;br /&gt;
                @Resource(name=&quot;빈명&quot;) 으로 사용 가능&lt;br /&gt;
                name 설정이 없다면 name &amp;gt; 타입 순으로 찾아준다.
              &lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>BBInJunHwang</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">Spring 강좌는 여러 절로 구성되어 있습니다. spring 시작하기(1) bean 생성 spring 시작하기(2) @annotation spring 시작하기(3) @datasource spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI spring 시작하기(5) DI 3가지 방법 spring 시작하기(6) AOP spring 시작하기(7) AOP PointCut spring 시작하기(8) Spring Profile &amp;lt;!– &amp;lt;div&amp;gt; [스프링] @Autowired / @Resource</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">spring 시작하기(1) bean 생성</title>
      <link href="http://localhost:4000/spring-01_basic_bak" rel="alternate" type="text/html" title="spring 시작하기(1) bean 생성" />
      <published>2022-06-12T03:00:00+09:00</published>
      <updated>2022-06-12T03:00:00+09:00</updated>
      <id>http://localhost:4000/spring-01_basic_bak</id>
      <content type="html" xml:base="http://localhost:4000/spring-01_basic_bak">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Spring 강좌는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;!-- _posts/spring/포스트날짜, md 확장자 제외한 파일명--&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-01_basic&quot;&gt;spring 시작하기(1) bean 생성&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-02_basic&quot;&gt;spring 시작하기(2) @annotation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-03_basic&quot;&gt;spring 시작하기(3) @datasource&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-04_basic&quot;&gt;spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-05_basic&quot;&gt;spring 시작하기(5) DI 3가지 방법&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-06_basic&quot;&gt;spring 시작하기(6) AOP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-07_basic&quot;&gt;spring 시작하기(7) AOP PointCut&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-08_basic&quot;&gt;spring 시작하기(8) Spring Profile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;br /&gt;
&lt;h2&gt;[스프링] Bean 개념 및 생성&lt;/h2&gt;&lt;br /&gt;
&lt;p&gt;스프링 빈이란?&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;
&lt;font size=&quot;3&quot;&gt;
-&amp;gt;  스프링 IOC 컨테이너가 관리하는 자바객체&lt;br /&gt;
-&amp;gt;  New로 생성한 객체가 아님&lt;br /&gt;
-&amp;gt;  ApplicationContext 로 얻을 수 있음
&lt;/font&gt;&lt;/p&gt;

스프링 빈 xml 등록 방법
&lt;p&gt;&lt;font size=&quot;3&quot;&gt;
xml 파일에서 빈으로 등록 할 id , 빈 클래스 경로 선언&lt;br /&gt;
bean 태그 내 property 를 통해서 setter method 이용한 주입이 가능하다.
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring01/ch01_bean_xml_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
setter 메서드 동작 방식 : set메서드명 -&amp;gt; name값으로 치환 되며&lt;br /&gt;
ex) setFormat -&amp;gt; format 으로 set 생략 + 첫글자 대-&amp;gt;소 로 인식한다.&lt;br /&gt;

&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring01/ch01_bean_class_01.PNG&quot; alt=&quot;absolute&quot; /&gt;&lt;br /&gt;
DAO &amp;lt;-&amp;gt; Service 간 의존관계가 존재할시 DI(Dependency Injection (의존관계 주입))이 가능하다.&lt;br /&gt;
Dao 클래스를 빈으로 생성 후 Service 빈에 constructor-arg ref= 빈id를 통해서 넘겨 줄 수 있다.&lt;br /&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring01/ch01_bean_xml_02.PNG&quot; alt=&quot;absolute&quot; /&gt;&lt;br /&gt;
Service 클래스 생성자에 dao를 넘겨 받아 생성한다.&lt;br /&gt;
&lt;img style=&quot;margin-left:0; margin-bottom: 25px;border: 2px outset gray; border-radius:10px;&quot; data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring01/ch01_bean_class_02.PNG&quot; alt=&quot;absolute&quot; /&gt;

&lt;/font&gt;&lt;/p&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>BBInJunHwang</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">Spring 강좌는 여러 절로 구성되어 있습니다. spring 시작하기(1) bean 생성 spring 시작하기(2) @annotation spring 시작하기(3) @datasource spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI spring 시작하기(5) DI 3가지 방법 spring 시작하기(6) AOP spring 시작하기(7) AOP PointCut spring 시작하기(8) Spring Profile [스프링] Bean 개념 및 생성 스프링 빈이란? -&amp;gt; 스프링 IOC 컨테이너가 관리하는 자바객체 -&amp;gt; New로 생성한 객체가 아님 -&amp;gt; ApplicationContext 로 얻을 수 있음</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">spring 시작하기(1) bean 생성</title>
      <link href="http://localhost:4000/spring-01_basic" rel="alternate" type="text/html" title="spring 시작하기(1) bean 생성" />
      <published>2022-06-12T03:00:00+09:00</published>
      <updated>2022-06-12T03:00:00+09:00</updated>
      <id>http://localhost:4000/spring-01_basic</id>
      <content type="html" xml:base="http://localhost:4000/spring-01_basic">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Spring 강좌는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;!-- _posts/spring/포스트날짜, md 확장자 제외한 파일명--&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-01_basic&quot;&gt;spring 시작하기(1) bean 생성&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-02_basic&quot;&gt;spring 시작하기(2) @annotation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-03_basic&quot;&gt;spring 시작하기(3) @datasource&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-04_basic&quot;&gt;spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-05_basic&quot;&gt;spring 시작하기(5) DI 3가지 방법&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-06_basic&quot;&gt;spring 시작하기(6) AOP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-07_basic&quot;&gt;spring 시작하기(7) AOP PointCut&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./spring-08_basic&quot;&gt;spring 시작하기(8) Spring Profile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
    &lt;header&gt;
      &lt;h2 class=&quot;title&quot;&gt;[스프링] Bean 개념 및 생성&lt;/h2&gt;&lt;br /&gt;
    &lt;/header&gt;
    &lt;div&gt;
      &lt;h3 class=&quot;subTitle&quot;&gt;스프링 빈이란?&lt;/h3&gt;
      &lt;p&gt; -&amp;gt;  스프링 IOC 컨테이너가 관리하는 자바객체&lt;/p&gt;
      &lt;p&gt; -&amp;gt;  New로 생성한 객체가 아님&lt;/p&gt;
      &lt;p&gt; -&amp;gt;  ApplicationContext 로 얻을 수 있음&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&quot;listWrapper&quot;&gt;
      &lt;span style=&quot;font-size: 20px;&quot;&gt;스프링 빈 xml 등록 방법&lt;/span&gt;
      &lt;ul class=&quot;imageList&quot;&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring01/ch01_bean_xml_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;xml 파일에서 빈으로 등록 할 id , 빈 클래스 경로 선언&lt;br /&gt;
              bean 태그 내 property 를 통해서 setter method 이용한 주입이 가능하다.&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring01/ch01_bean_class_01.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;setter 메서드 동작 방식 : set메서드명 -&amp;gt; name값으로 치환 되며 &lt;br /&gt; ex) 
              setFormat -&amp;gt; format 으로 set 생략 + 첫글자 대-&amp;gt;소 로 인식한다.&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring01/ch01_bean_xml_02.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;DAO &amp;lt;-&amp;gt; Service 간 의존관계가 존재할시 DI(Dependency Injection (의존관계 주입))이 가능하다.&lt;br /&gt;
              Dao 클래스를 빈으로 생성 후 Service 빈에 constructor-arg ref= 빈id를 통해서 넘겨 줄 수 있다.&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/images/spring/spring01/ch01_bean_class_02.PNG&quot; alt=&quot;absolute&quot; /&gt;
            &lt;div&gt;
              &lt;span&gt;Service 클래스 생성자에 dao를 넘겨 받아 생성한다.&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;

&lt;!-- sample --&gt;
&lt;!-- 
  &lt;div&gt;
    &lt;header&gt;
      &lt;h2 class=&quot;title&quot;&gt;&lt;/h2&gt;&lt;br&gt;
    &lt;/header&gt;
    &lt;div&gt;
      &lt;h3 class=&quot;subTitle&quot;&gt;&lt;/h3&gt;
      &lt;p&gt; -&gt;  &lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&quot;listWrapper&quot;&gt;
      &lt;span style=&quot;font-size: 20px;&quot;&gt;&lt;/span&gt;
      &lt;ul class=&quot;imageList&quot;&gt;
        &lt;li&gt;
          &lt;div class=&quot;area&quot;&gt;
            &lt;img data-action=&quot;zoom&quot; src=&quot;&quot; alt=&apos;absolute&apos;&gt;
            &lt;div&gt;
              &lt;span&gt;&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt; 
  --&gt;</content>

      
      
      
      
      

      <author>
          <name>BBInJunHwang</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">Spring 강좌는 여러 절로 구성되어 있습니다. spring 시작하기(1) bean 생성 spring 시작하기(2) @annotation spring 시작하기(3) @datasource spring 시작하기(4) ArrayList 빈생성 및 component 스캔과 Service-dao간 DI spring 시작하기(5) DI 3가지 방법 spring 시작하기(6) AOP spring 시작하기(7) AOP PointCut spring 시작하기(8) Spring Profile</summary>
      

      
      
    </entry>
  
</feed>
